/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEFAULT 0
#define NUM_SYM 1
#define NAV     2
#define FUN     3

#define AS(keycode) &as LS(keycode) keycode

&lt { quick_tap_ms = <140>; };

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <140>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        
        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            #binding-cells = <2>;
            tapping_term_ms = <180>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };        
    };
};
/ {
    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <25>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
        
        combo_tab {
            timeout-ms = <25>;
            key-positions = <10 11>;
            bindings = <&kp TAB>;
        }; 
        
        combo_caps {
            timeout-ms = <25>;
            key-positions = <20 21>;
            bindings = <&caps_word>;
        };
        
        combo_bspc {
            timeout-ms = <25>;
            key-positions = <8 9>;
            bindings = <&kp BSPC>;
        };
        
        combo_quote {
            timeout-ms = <25>;
            key-positions = <18 19>;
            bindings = <&kp SQT>;
        }; 
        
        combo_slash {
            timeout-ms = <25>;
            key-positions = <27 28>;
            bindings = <&kp FSLH>;
        };  
        
   };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
    &kp Q      &kp W        &kp E       &kp R       &kp T  &kp Y  &kp U       &kp I       &kp O       &kp P
    &hm LGUI A &hm LALT S   &hm LCTRL D &hm LSHFT F &kp G  &kp H  &hm RSHFT J &hm RCTRL K &hm RALT L  &hm RGUI RET
    &kp Z                   &kp X       &kp C       &kp V  &kp B  &kp N       &kp M       &kp COMMA   &kp DOT
    &kp LPAR   &lt FUN BSPC &kp LALT    &lt NAV BSPC       &lt NUM_SYM SPACE  &kp SEMI    &lt NAV DEL &kp RPAR
            >;
        };
        num_sym {
            bindings = <
    AS(N1)     AS(N2)     AS(N3)     AS(N4)      AS(N5) AS(N6) AS(N7)      AS(N8)      AS(N9)    AS(N0)
    &kp LGUI   &kp LALT   &kp LCTRL  &kp LSHFT   &trans &trans &kp RSHFT   &kp RCTRL   &kp RALT  &kp RGUI
    AS(MINUS)             AS(EQUAL)  &none       &none  &none  &none       &none       AS(GRAVE) AS(BACKSLASH)
    AS(LBKT)   &none      &trans     &trans              &trans            &kp RET     AS(SEMI)  AS(RBKT)
            >;
        };

    nav {
            bindings = <
    &bt BT_SEL 0  &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4  &kp INS &kp HOME  &kp UP       &kp END     &trans 
    &bt BT_CLR    &trans       &trans       &trans       &none         &none   &kp LEFT  &kp DOWN     &kp RIGHT   &none
    &bootloader                &reset       &none        &none         &none   &none     &kp PG_DN    &kp PG_UP   &trans      
    &none         &none        &none        &trans       &trans                          &kp RET      &trans      &trans
            >;
        };
        
        fun {
            bindings = <
    &kp F1     &kp F2     &kp F3     &kp F4      &kp F5 &kp F6 &kp F7      &kp F8      &kp F9    &kp F10
    &kp LGUI   &kp LALT   &kp LCTRL  &kp LSHFT   &trans &trans &kp RSHFT   &kp RCTRL   &kp RALT  &kp RGUI
    &kp F11               &none      &none       &none  &none  &none       &none       &none     &kp F12
    &trans     &none      &trans     &trans              &trans            &trans      &trans    &trans
            >;
        };        
    };
};
